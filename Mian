{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6f272662-65bb-4b53-9455-bdbc6a0dcc8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "import joblib\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c5581ad7-9d27-498a-b738-5f898749c14b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Activity Data:\n",
      "   patient_id location_name                 date\n",
      "0      0697d   Fridge Door  2019-06-28 13:03:29\n",
      "1      0697d       Kitchen  2019-06-28 13:11:44\n",
      "2      0697d    Front Door  2019-06-28 13:13:50\n",
      "3      0697d       Bedroom  2019-06-28 13:13:53\n",
      "4      0697d   Fridge Door  2019-06-28 13:14:09 \n",
      "\n",
      "Labels Data:\n",
      "   patient_id                 date            type\n",
      "0      c55f8  2019-04-04 09:10:21  Blood pressure\n",
      "1      16f4b  2019-04-08 13:40:20  Blood pressure\n",
      "2      16f4b  2019-04-11 12:00:22       Agitation\n",
      "3      ec812  2019-04-12 09:10:29  Blood pressure\n",
      "4      16f4b  2019-04-14 12:00:07       Agitation \n",
      "\n",
      "Physiology Data:\n",
      "   patient_id                 date               device_type    value    unit\n",
      "0      0697d  2019-06-28 13:42:09          Body Temperature   36.072     Cel\n",
      "1      0697d  2019-06-28 13:42:44          Body Temperature   35.831     Cel\n",
      "2      0697d  2019-06-28 13:43:40          Body Temperature   35.831     Cel\n",
      "3      0697d  2019-06-28 13:45:15   Systolic blood pressure  165.000  mm[Hg]\n",
      "4      0697d  2019-06-28 13:45:15  Diastolic blood pressure   82.000  mm[Hg] \n",
      "\n",
      "Sleep Data:\n",
      "   patient_id              date  state  heart_rate  respiratory_rate  snoring\n",
      "0      0f352  25,06,2019 22:53  AWAKE          69                14    False\n",
      "1      0f352  25,06,2019 22:54  AWAKE          66                14    False\n",
      "2      0f352  25,06,2019 22:55  AWAKE          70                14    False\n",
      "3      0f352  25,06,2019 22:56  AWAKE          70                13    False\n",
      "4      0f352  25,06,2019 22:57  AWAKE          68                13    False \n",
      "\n",
      "Demographics Data:\n",
      "   patient_id        age     sex\n",
      "0      b9d58   (70, 80]  Female\n",
      "1      c55f8   (80, 90]  Female\n",
      "2      16f4b   (80, 90]    Male\n",
      "3      fd100  (90, 110]  Female\n",
      "4      1fbe4   (80, 90]    Male \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Load the datasets \n",
    "activity = pd.read_csv(r'C:\\Users\\LENOVO\\Desktop\\Dataset\\activity.csv')\n",
    "labels = pd.read_csv(r'C:\\Users\\LENOVO\\Desktop\\Dataset\\labels.csv')\n",
    "physiology = pd.read_csv(r'C:\\Users\\LENOVO\\Desktop\\Dataset\\physiology.csv')\n",
    "sleep = pd.read_csv(r'C:\\Users\\LENOVO\\Desktop\\Dataset\\sleep.csv')\n",
    "demographics = pd.read_csv(r'C:\\Users\\LENOVO\\Desktop\\Dataset\\demographics.csv')\n",
    "\n",
    "# Explore the datasets\n",
    "print(\"Activity Data:\\n\", activity.head(), \"\\n\")\n",
    "print(\"Labels Data:\\n\", labels.head(), \"\\n\")\n",
    "print(\"Physiology Data:\\n\", physiology.head(), \"\\n\")\n",
    "print(\"Sleep Data:\\n\", sleep.head(), \"\\n\")\n",
    "print(\"Demographics Data:\\n\", demographics.head(), \"\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a4fdd69-0768-4f1c-83e5-08dc2a3f436e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading C:\\Users\\LENOVO\\Desktop\\cleaned\\cleaned_sleep.csv...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\LENOVO\\AppData\\Local\\Temp\\ipykernel_7208\\2515946839.py:23: DtypeWarning: Columns (0,2,5) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  dfs[key] = pd.read_csv(file_path)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded sleep with shape: (335939, 32)\n",
      "Loading C:\\Users\\LENOVO\\Desktop\\cleaned\\cleaned_activity.csv...\n",
      "Loaded activity with shape: (84993, 3)\n",
      "Loading C:\\Users\\LENOVO\\Desktop\\cleaned\\cleaned_physiology.csv...\n",
      "Loaded physiology with shape: (5094, 5)\n",
      "Loading C:\\Users\\LENOVO\\Desktop\\cleaned\\cleaned_labels.csv...\n",
      "Loaded labels with shape: (47, 3)\n",
      "Loading C:\\Users\\LENOVO\\Desktop\\cleaned\\cleaned_demographics.csv...\n",
      "Loaded demographics with shape: (9, 4)\n",
      "\n",
      "Column names in each DataFrame:\n",
      "sleep: Index(['patient_id', 'date', 'state', 'heart_rate', 'respiratory_rate',\n",
      "       'snoring', 'Unnamed: 6', 'Unnamed: 7', 'Unnamed: 8', 'Unnamed: 9',\n",
      "       'Unnamed: 10', 'Unnamed: 11', 'Unnamed: 12', 'Unnamed: 13',\n",
      "       'Unnamed: 14', 'Unnamed: 15', 'Unnamed: 16', 'Unnamed: 17',\n",
      "       'Unnamed: 18', 'Unnamed: 19', 'Unnamed: 20', 'Unnamed: 21',\n",
      "       'Unnamed: 22', 'Unnamed: 23', 'Unnamed: 24', 'Unnamed: 25',\n",
      "       'Unnamed: 26', 'Unnamed: 27', 'Unnamed: 28', 'Unnamed: 29',\n",
      "       'Unnamed: 30', 'Unnamed: 31'],\n",
      "      dtype='object')\n",
      "activity: Index(['patient_id', 'location_name', 'date'], dtype='object')\n",
      "physiology: Index(['patient_id', 'date', 'device_type', 'value', 'unit'], dtype='object')\n",
      "labels: Index(['patient_id', 'date', 'type'], dtype='object')\n",
      "demographics: Index(['patient_id', 'age', 'sex', 'date'], dtype='object')\n",
      "\n",
      "Sample data from sleep:\n",
      "  patient_id                          date\n",
      "0      16f4b 1970-01-01 00:00:00.000043800\n",
      "1      16f4b 1970-01-01 00:00:00.000043800\n",
      "2      16f4b 1970-01-01 00:00:00.000043800\n",
      "3      16f4b 1970-01-01 00:00:00.000043800\n",
      "4      16f4b 1970-01-01 00:00:00.000043800\n",
      "\n",
      "Sample data from activity:\n",
      "  patient_id                          date\n",
      "0      16f4b 1970-01-01 00:00:00.000043466\n",
      "1      16f4b 1970-01-01 00:00:00.000043466\n",
      "2      16f4b 1970-01-01 00:00:00.000043466\n",
      "3      16f4b 1970-01-01 00:00:00.000043466\n",
      "4      16f4b 1970-01-01 00:00:00.000043466\n",
      "\n",
      "Sample data from physiology:\n",
      "  patient_id                          date\n",
      "0      16f4b 1970-01-01 00:00:00.000043557\n",
      "1      16f4b 1970-01-01 00:00:00.000043557\n",
      "2      16f4b 1970-01-01 00:00:00.000043557\n",
      "3      16f4b 1970-01-01 00:00:00.000043557\n",
      "4      16f4b 1970-01-01 00:00:00.000043558\n",
      "\n",
      "Sample data from labels:\n",
      "  patient_id                          date\n",
      "0      c55f8 1970-01-01 00:00:00.000043559\n",
      "1      16f4b 1970-01-01 00:00:00.000043681\n",
      "2      16f4b 1970-01-01 00:00:00.000043773\n",
      "3      ec812 1970-01-01 00:00:00.000043803\n",
      "4      c5785 1970-01-01 00:00:00.000043470\n",
      "\n",
      "Sample data from demographics:\n",
      "  patient_id                          date\n",
      "0      c55f8 1970-01-01 00:00:00.000043800\n",
      "1      16f4b 1970-01-01 00:00:00.000043800\n",
      "2      1fbe4 1970-01-01 00:00:00.000043800\n",
      "3      93c14 1970-01-01 00:00:00.000043800\n",
      "4      ec812 1970-01-01 00:00:00.000043800\n",
      "Unique (patient_id, date) pairs in sleep: 115\n",
      "Unique (patient_id, date) pairs in activity: 106\n",
      "Unique (patient_id, date) pairs in physiology: 493\n",
      "Unique (patient_id, date) pairs in labels: 36\n",
      "Unique (patient_id, date) pairs in demographics: 9\n",
      "\n",
      "Unique patient_ids in sleep: 9\n",
      "Unique dates in sleep: 12\n",
      "\n",
      "Unique patient_ids in activity: 9\n",
      "Unique dates in activity: 12\n",
      "\n",
      "Unique patient_ids in physiology: 9\n",
      "Unique dates in physiology: 91\n",
      "\n",
      "Unique patient_ids in labels: 9\n",
      "Unique dates in labels: 23\n",
      "\n",
      "Unique patient_ids in demographics: 9\n",
      "Unique dates in demographics: 1\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "\n",
    "# Define file paths for each cleaned CSV file (update with actual paths)\n",
    "csv_files = {\n",
    "    'sleep': r'C:\\Users\\LENOVO\\Desktop\\cleaned\\cleaned_sleep.csv',\n",
    "    'activity': r'C:\\Users\\LENOVO\\Desktop\\cleaned\\cleaned_activity.csv',\n",
    "    'physiology': r'C:\\Users\\LENOVO\\Desktop\\cleaned\\cleaned_physiology.csv',\n",
    "    'labels': r'C:\\Users\\LENOVO\\Desktop\\cleaned\\cleaned_labels.csv',\n",
    "    'demographics': r'C:\\Users\\LENOVO\\Desktop\\cleaned\\cleaned_demographics.csv'\n",
    "}\n",
    "\n",
    "# Check if files exist\n",
    "for key, file_path in csv_files.items():\n",
    "    if not os.path.isfile(file_path):\n",
    "        print(f\"File not found: {file_path}\")\n",
    "\n",
    "# Load cleaned CSVs into DataFrames\n",
    "dfs = {}\n",
    "for key, file_path in csv_files.items():\n",
    "    if os.path.isfile(file_path):\n",
    "        print(f\"Loading {file_path}...\")\n",
    "        dfs[key] = pd.read_csv(file_path)\n",
    "        print(f\"Loaded {key} with shape: {dfs[key].shape}\")\n",
    "\n",
    "# Check column names\n",
    "print(\"\\nColumn names in each DataFrame:\")\n",
    "for key, df in dfs.items():\n",
    "    print(f\"{key}: {df.columns}\")\n",
    "\n",
    "# Convert 'date' columns to datetime\n",
    "for key in dfs.keys():\n",
    "    if 'date' in dfs[key].columns:\n",
    "        dfs[key]['date'] = pd.to_datetime(dfs[key]['date'], errors='coerce')\n",
    "\n",
    "# Print sample data\n",
    "for key, df in dfs.items():\n",
    "    print(f\"\\nSample data from {key}:\")\n",
    "    print(df[['patient_id', 'date']].head())\n",
    "\n",
    "# Check unique (patient_id, date) pairs\n",
    "for key, df in dfs.items():\n",
    "    if 'date' in df.columns:\n",
    "        unique_pairs = df[['patient_id', 'date']].drop_duplicates().shape[0]\n",
    "        print(f\"Unique (patient_id, date) pairs in {key}: {unique_pairs}\")\n",
    "    else:\n",
    "        print(f\"No 'date' column in {key}\")\n",
    "\n",
    "# Print unique patient_ids and dates\n",
    "for key, df in dfs.items():\n",
    "    print(f\"\\nUnique patient_ids in {key}: {df['patient_id'].nunique()}\")\n",
    "    if 'date' in df.columns:\n",
    "        print(f\"Unique dates in {key}: {df['date'].nunique()}\")\n",
    "\n",
    "# Merge relevant DataFrames based on patient_id and date\n",
    "try:\n",
    "    merged_df = pd.merge(dfs['sleep'], dfs['activity'], on=['patient_id', 'date'], how='inner')\n",
    "    print(\"\\nMerged sleep and activity data with shape:\", merged_df.shape)\n",
    "    merged_df = pd.merge(merged_df, dfs['physiology'], on=['patient_id', 'date'], how='inner')\n",
    "    print(\"Merged with physiology data, new shape:\", merged_df.shape)\n",
    "    merged_df = pd.merge(merged_df, dfs['labels'], on=['patient_id', 'date'], how='inner')\n",
    "    print(\"Merged with labels data, new shape:\", merged_df.shape)\n",
    "    merged_df = pd.merge(merged_df, dfs['demographics'], on='patient_id', how='left')  # Assuming demographics is a single record per patient\n",
    "    print(\"Merged with demographics data, new shape:\", merged_df.shape)\n",
    "except KeyError as e:\n",
    "    print(f\"Merge failed due to missing key: {e}\")\n",
    "    raise\n",
    "\n",
    "# Display merged DataFrame information\n",
    "print(\"\\nMerged DataFrame Info:\")\n",
    "print(merged_df.info())\n",
    "\n",
    "# Save merged DataFrame to a new CSV file\n",
    "merged_file_path = r'C:\\Users\\LENOVO\\Desktop\\Dataset\\merged_data.csv'\n",
    "merged_df.to_csv(merged_file_path, index=False)\n",
    "print(f\"Merged data saved to {merged_file_path}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "579ff728-00c3-44af-aea8-39357389333a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
